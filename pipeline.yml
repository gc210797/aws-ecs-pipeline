AWSTemplateFormatVersion: 2010-09-09
Description: AWS Cloudformation template to create codepipeline for ECS deployment on EC2

Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
    Description: Instance type for EC2 instances
  ClusterSize:
    Type: Number
    Default: 2
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Default: subnet-1d74d666,subnet-6c0c9420
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-97fcd3f6
  VpcId:
    Type: AWS::EC2::VPC::Id
    Default: vpc-982924f0
  IsELBNeeded:
    Type: String
    AllowedValues:
      - Y
      - N
    Default: Y
  LoadBalancerPort:
    Type: Number
    Default: 8080
  HostPort:
    Type: Number
    Default: 8080
  ContainerPort:
    Type: Number
    Default: 8080
  HealthCheckPath:
    Type: String
    Default: /ws
  ListenerRulePriority:
    Type: Number
    Default: 1
  PathPattern:
    Type: String
    Default: /ws
  ECSRole:
    Type: String
    Default: RUST-CHAT
  TaskExecutionRole:
    Type: String
    Default: RUST-CHAT-TASK
  CodeBuildServiceRole:
    Type: String
    Default: RUST-CHAT-CB
  GitHubUser:
    Type: String
    Default: gc210797
  CodepipeArtifactLocation:
    Type: String
    Default: cf-templates-njdpta8paxbp-ap-south-1
  GitHubToken:
    Type: String
    Default: 40cd26c91442ba48c4b73f46c2adc33685fba730
  GitHubRepo:
    Type: String
    Default: aws-ecs-pipeline
  GitHubBranch:
    Type: String
    Default: master
  ECRRepositoryName:
    Type: String
    Default: rust-chat
  HealthCheckGracePeriod:
    Type: Number
    Default: 600

Conditions:
  ELBCondition: !Equals [ !Ref IsELBNeeded, Y ]

Resources:
  # ELB Creation
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: ELBCondition
    Properties:
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref SecurityGroup
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: ELBCondition
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref LoadBalancerPort
      Protocol: "HTTP"
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: ELBCondition
    Properties:
      VpcId: !Ref VpcId
      Port: !Ref HostPort
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Protocol: HTTP
      TargetType: "instance"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 120
      Matcher:
        HttpCode: 200-299
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: !Ref ListenerRulePriority
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref PathPattern
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
  #ECR Repository
  Repository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepositoryName
  #ECS Cluster
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0e26e067030ec6083
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref ECSRole
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        "Fn::Base64": !Sub |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
            /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            add_instance_to_cluster:
              command: !Sub echo ECS_CLUSTER=${Cluster} > /etc/ecs/ecs.config
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref ClusterSize
      MaxSize: !Ref ClusterSize
      DesiredCapacity: !Ref ClusterSize
      HealthCheckGracePeriod: !Ref HealthCheckGracePeriod
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstanceInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignal: true
      Tags:
        - Keys: Name
          Value: !Sub ${AWS::StackName}-EC2
          PropogateAtLaunch: true
  #ECS Service
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-td
      RequiresCompatibilities:
        - EC2
      Memory: 512
      Cpu: 256
      NetworkMode: bridge
      ExecutionRoleArn: !Sub ${TaskExecutionRole}
      ContainerDefinitions:
        - Name: !Sub ${AWS::StackName}-cd
          Image: httpd
          Essential: true
          Memory: 256
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: !Ref HostPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Ref AWS::StackName
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${AWS::StackName}
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: !Ref ClusterSize
      TaskDefinition: !Ref TaskDefinition
      LaunchType: EC2
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriod
      LoadBalancers:
        - ContainerName: !Sub ${AWS::StackName}-cd
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup 
  #Code Pipeline
  CodeBuildDocker:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-docker
      ServiceRole: !Ref CodeBuildServiceRole
      VpcConfig:
        VpcId: !Ref VpcId
        Subnets: !Ref Subnets
        SecurityGroupIds:
          - !Ref SecurityGroup
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
          - Name: APPNAME
            Value: !Sub ${AWS::StackName}-cd #Appname should be same as container name
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - IMAGE_URI="${REPOSITORY_URI}:${TAG}"
            build:
              commands:
                - docker build --tage "$IMAGE_URI" .
                - docker push "$IMAGE_URI"
                - echo "[{\"name\":\"$APPNAME\",\"imageUri\":\"$IMAGE_URI\"}]" > images.json
            artifacts:
              files: images.json

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${CodepipeArtifactLocation}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                  - ecs:RegisterTaskDefinition
                  - ecs:UpdateService
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodepipeArtifactLocation
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: Source
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildDockerImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildDocker
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName: !Ref Cluster
                ServiceName: !Ref ECSService
                FileName: images.json
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
